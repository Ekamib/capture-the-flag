pragma solidity ^0.8.24;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

// Define your ERC20 token contract
contract MyToken is ERC20 {

    // Constructor that mints the initial supply to the deployer's address
    constructor(uint256 initialSupply) ERC20("MyToken", "MTX") {
        // Mint the initial supply of tokens to the deployer's address
        _mint(msg.sender, initialSupply);
    }

    // Mint function: Allows creation of new tokens and assigns them to a specific address
    function mint(address to, uint256 amount) public {
        _mint(to, amount); // Internal function to mint new tokens
    }

    // Burn function: Allows tokens to be destroyed from a specified address, reducing total supply
    function burn(address from, uint256 amount) public {
        _burn(from, amount); // Internal function to burn tokens from the specified address
    }

    // Transfer function: Allows the caller to send tokens to another address
    function transfer(address to, uint256 amount) public override returns (bool) {
        return super.transfer(to, amount); // Uses the internal _transfer function
    }

    // Approve function: Allows the caller to authorize another address to spend tokens on their behalf
    function approve(address spender, uint256 amount) public override returns (bool) {
        return super.approve(spender, amount); // Uses the internal _approve function
    }

    // TransferFrom function: Allows a spender to transfer tokens from one address to another
    function transferFrom(address from, address to, uint256 amount) public override returns (bool) {
        return super.transferFrom(from, to, amount); // Uses the internal _transfer and _approve functions
    }

    // Function to get the balance of tokens for a specific account
    function getBalanceOf(address account) public view returns (uint256) {
        return balanceOf(account); // Returns the balance using the internal balanceOf function
    }
}
